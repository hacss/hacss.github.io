_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[14],{ry7u:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/fundamentals",function(){return n("uYgP")}])},uYgP:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return p}));var a=n("rePB"),s=n("Ff2n"),i=(n("q1tI"),n("7ljp")),l=n("xFV3");function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){Object(a.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var c={};function p(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(i.b)("wrapper",o(o(o({},c),n),{},{components:t,mdxType:"MDXLayout"}),Object(i.b)(l.a,{title:"Fundamentals",subtitle:"A few basics about Hacss",mdxType:"Article"},Object(i.b)("p",null,"All professional web developers are familiar with inline styles. Most developers\nrestrict their use to trivial prototyping exercises due to\n",Object(i.b)("a",o({parentName:"p"},{href:"https://stackoverflow.com/questions/131653/inline-style-to-act-as-hover-in-css"}),"functional limitations"),"\nor belief in a separation of concerns between markup and presentation styles. On\nthe other hand, newer architectures such as\n",Object(i.b)("a",o({parentName:"p"},{href:"https://css-tricks.com/lets-define-exactly-atomic-css/"}),"atomic CSS")," and\n",Object(i.b)("a",o({parentName:"p"},{href:"https://medium.com/dailyjs/what-is-actually-css-in-js-f2f529a2757"}),"CSS-in-JS"),"\ndemonstrate that some developers prefer ",Object(i.b)("em",{parentName:"p"},"colocation")," of markup and related style\ninformation."),Object(i.b)("p",null,"Like these approaches, Hacss facilitates the colocation of markup and styles. It\ncombines the strongest features of atomic CSS and CSS-in-JS while minimizing the\ndownsides of each approach."),Object(i.b)("h1",null,"CSS-in-HTML"),Object(i.b)("p",null,'Hacss works by embedding CSS syntax within ordinary HTML classes. While these\nself-describing class names are meaningless to the browser, Hacss analyzes them\nat build time and generates a style sheet that contains the corresponding\n"actual" CSS. For example, the class name ',Object(i.b)("inlineCode",{parentName:"p"},"color:red;")," results in the style\nsheet ",Object(i.b)("inlineCode",{parentName:"p"},".color\\:red\\;{color:red;}")),Object(i.b)("p",null,"Hacss can find your style rule classes within HTML templates, JavaScript\nmodules, or other code files that render HTML: It is essentially\nlanguage-agnostic. You'll just need to provide Hacss with the location of these\nsource files."),Object(i.b)("h1",null,"Advantages"),Object(i.b)("h2",null,"Versus inline styles"),Object(i.b)("p",null,"CSS-in-HTML enhances the development experience of inline styles with additional\ncapabilities that normally require external style sheets:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"selectors"),Object(i.b)("li",{parentName:"ul"},"variables (named constants)"),Object(i.b)("li",{parentName:"ul"},"media queries")),Object(i.b)("p",null,"Furthermore, CSS-in-HTML\n",Object(i.b)("a",o({parentName:"p"},{href:"https://simonadcock.com/are-inline-styles-faster-than-atomic-css/"}),"may be faster"),"\nthan native inline styles."),Object(i.b)("h2",null,"Versus CSS-in-JS"),Object(i.b)("p",null,"CSS-in-HTML works without JavaScript (except at build time) and imposes fewer\nconstraints upon your architecture by supporting a wide array of HTML templating\nlanguages, compile-to-JS languages, and application frameworks."),Object(i.b)("p",null,"Because all the work is done at build time, CSS-in-HTML also offers better\nperformance."),Object(i.b)("h2",null,"Versus atomic CSS"),Object(i.b)("p",null,"With a familiar syntax that translates directly to CSS, the CSS-in-HTML approach\nprovides significant advantages over atomic CSS."),Object(i.b)("p",null,"First, the learning curve is greatly reduced because, unlike atomic CSS\nframeworks, there is no system of utility class names to learn. Instead, the\nclass names mostly consist of the underlying CSS that one would write anyway."),Object(i.b)("p",null,"Perhaps more importantly, CSS-in-HTML is flexible in a way that no set of\npredefined classes can match. Hacss makes it possible to use advanced selectors\nwhere atomic CSS frameworks are typically limited to basic pseudo-classes like\n",Object(i.b)("inlineCode",{parentName:"p"},":hover")," and ",Object(i.b)("inlineCode",{parentName:"p"},":focus"),'. It also allows variables to be interpolated into style\nrules, which can address "edge-case" scenarios, e.g. ',Object(i.b)("inlineCode",{parentName:"p"},"left:calc(50%+#{$spacing4});")),Object(i.b)("h1",null,"Constraints"),Object(i.b)("p",null,"While CSS-in-HTML introduces fewer constraints than other approaches, some basic\nrules apply."),Object(i.b)("h2",null,"Whitespace"),Object(i.b)("p",null,"Whitespace cannot be used within a style rule because it is used to delimit HTML\nclasses. The browser would simply not apply the intended style rule if it were\nallowed to contain spaces."),Object(i.b)("p",null,"When spaces are strictly required (which is actually not often), double\nunderscores may be used in declaration values, e.g.\n",Object(i.b)("inlineCode",{parentName:"p"},"box-shadow:0__0__0__1px__black;")),Object(i.b)("h2",null,"Dynamic class names"),Object(i.b)("p",null,"Style rules cannot be constructed dynamically using string concatenation,\ntemplate literals, or otherwise. They must appear in the code as string literals\nin order to be detected and processed correctly."),Object(i.b)("p",null,"Hacss provides its own syntax for variables and basic interpolation, and\nselectors can be used to apply styles conditionally. When these options are\ninsufficient (such as when styling the width of an element as calculated in\nJavaScript), a native inline style is a reasonable solution and usually does not\nintroduce any unintended side effects despite its high specificity.")))}p.isMDXComponent=!0}},[["ry7u",0,2,1,3,4]]]);