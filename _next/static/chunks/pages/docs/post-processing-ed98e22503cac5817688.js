_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[15],{"8c1N":function(e,t){function n(){return new DOMException("The request is not allowed","NotAllowedError")}e.exports=async function(e){try{await async function(e){if(!navigator.clipboard)throw n();return navigator.clipboard.writeText(e)}(e)}catch(t){try{await async function(e){const t=document.createElement("span");t.textContent=e,t.style.whiteSpace="pre",t.style.webkitUserSelect="auto",t.style.userSelect="all",document.body.appendChild(t);const a=window.getSelection(),o=window.document.createRange();a.removeAllRanges(),o.selectNode(t),a.addRange(o);let r=!1;try{r=window.document.execCommand("copy")}finally{a.removeAllRanges(),window.document.body.removeChild(t)}if(!r)throw n()}(e)}catch(a){throw a||t||n()}}}},bkjR:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/post-processing",function(){return n("lQpE")}])},"fK+J":function(e,t,n){"use strict";var a=n("nKUr"),o=n("8c1N"),r=n.n(o);t.a=function(e){var t=e.children;return Object(a.jsxs)("div",{className:"\n      display:inline-flex;\n      align-items:center;\n      border-width:1px;\n      border-style:solid;\n      border-color:$gray10;\n      border-radius:$sm;\n      background:$gray05;\n      color:$gray95;\n      font:$code;\n      max-width:100%;\n    ",children:[Object(a.jsx)("div",{className:"\n        padding:$len8;\n        flex:1;\n        white-space:nowrap;\n        overflow-x:auto;\n      ",children:t}),Object(a.jsx)("button",{className:"\n          appearance:none;\n          border:0;\n          margin:0;\n          padding:$len8\n          background:transparent;\n          color:$gray40;\n          :hover{color:$blue40}\n          :active{color:$red30}!\n          cursor:pointer;\n        ",onClick:function(){r()(t instanceof Array?t.join(""):t)},children:Object(a.jsx)("svg",{width:"16",height:"16",viewBox:"0 0 16 16",children:Object(a.jsx)("path",{fill:"currentColor",fillRule:"evenodd",d:"M14 12V2H4V0h12v12h-2zM0 4h12v12H0V4zm2 2v8h8V6H2z"})})})]})}},lQpE:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return p}));var a=n("rePB"),o=n("Ff2n"),r=(n("q1tI"),n("7ljp")),i=n("xFV3");n("fK+J");function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){Object(a.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var c={};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",l(l(l({},c),n),{},{components:t,mdxType:"MDXLayout"}),Object(r.b)(i.a,{title:"Post-processing",subtitle:"Add more capabilities to Hacss with PostCSS plugins",mdxType:"Article"},Object(r.b)("p",null,"The static style sheet that Hacss produces is fully compatible with\n",Object(r.b)("a",l({parentName:"p"},{href:"https://postcss.org"}),"PostCSS"),", which makes it easy to add capabilities to Hacss\nusing a large catalog of ",Object(r.b)("a",l({parentName:"p"},{href:"https://www.postcss.parts"}),"PostCSS plugins"),'. While\nPostCSS plugins are often designed around the experience of authoring a style\nsheet, many of them remain useful and relevant even in the context of "inline\nstyles". Below are a few ideas to get you started.'),Object(r.b)("p",null,"To use these plugins with Hacss, start with the Hacss ",Object(r.b)("a",l({parentName:"p"},{href:"./cli"}),"CLI"),",\n",Object(r.b)("a",l({parentName:"p"},{href:"./webpack"}),"Webpack integration"),", or ",Object(r.b)("a",l({parentName:"p"},{href:"./api"}),"API"),". Once Hacss is integrated into\nyour build process, consult the\n",Object(r.b)("a",l({parentName:"p"},{href:"https://github.com/postcss/postcss#usage"}),"PostCSS setup")," as needed.\nEssentially, you will provide PostCSS the style sheet produced by Hacss the same\nas if you had authored the style sheet yourself manually."),Object(r.b)("h2",null,Object(r.b)("a",l({parentName:"h2"},{href:"https://github.com/postcss/autoprefixer"}),"autoprefixer")),Object(r.b)("p",null,"Autoprefixer is a popular utility that automatically adds vendor prefixes to\nyour CSS as needed. For example, you can simply write ",Object(r.b)("inlineCode",{parentName:"p"},"appearance:none;")," in your\ncode, and Autoprefixer will automatically add ",Object(r.b)("inlineCode",{parentName:"p"},"-ms-appearance"),",\n",Object(r.b)("inlineCode",{parentName:"p"},"-moz-appearance"),", and various other vendor-prefixed versions to the Hacss\noutput. Similarly, you can write ",Object(r.b)("inlineCode",{parentName:"p"},"::placeholder{color:gray}"),", and Autoprefixer\nwill automatically create the vendor-prefixed versions, meaning that there is no\nneed to write ",Object(r.b)("inlineCode",{parentName:"p"},"::-ms-input-placeholder{color:gray}")," for IE compatibility, for\nexample."),Object(r.b)("h2",null,Object(r.b)("a",l({parentName:"h2"},{href:"https://github.com/hail2u/node-css-mqpacker"}),"css-mqpacker")),Object(r.b)("p",null,"This plugin offers a performance optimization that is highly recommended for\nnon-trivial projects. Any two rules that use the same media query will be\ngrouped together within a single media query block, reducing the size of your\nCSS output."),Object(r.b)("h2",null,Object(r.b)("a",l({parentName:"h2"},{href:"https://github.com/kinday/postcss-axis"}),"axis")),Object(r.b)("p",null,"The axis plugin supports additional shorthand properties not available natively\nin CSS, such as:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"padding-x"),", expanded to ",Object(r.b)("inlineCode",{parentName:"li"},"padding-left")," and ",Object(r.b)("inlineCode",{parentName:"li"},"padding-right")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"margin-y"),", expanded to ",Object(r.b)("inlineCode",{parentName:"li"},"margin-top")," and ",Object(r.b)("inlineCode",{parentName:"li"},"margin-bottom")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"border-x-color"),", exapnded to ",Object(r.b)("inlineCode",{parentName:"li"},"border-top-color")," and ",Object(r.b)("inlineCode",{parentName:"li"},"border-bottom-color"))),Object(r.b)("p",null,"You can use these in Hacss rules just like you would use them in a style sheet,\ne.g. ",Object(r.b)("inlineCode",{parentName:"p"},"border-x-width:1px;")),Object(r.b)("h2",null,Object(r.b)("a",l({parentName:"h2"},{href:"https://github.com/cuth/postcss-pxtorem"}),"pxtorem")),Object(r.b)("p",null,"This plugin allows you to think in terms of pixels without losing the benefits\nof relative units. Write a rule like ",Object(r.b)("inlineCode",{parentName:"p"},"width:512px;")," and it will be rendered as\n",Object(r.b)("inlineCode",{parentName:"p"},".width\\:512px\\;{width:32rem}"),"."),Object(r.b)("p",null,"You could also consider the ",Object(r.b)("a",l({parentName:"p"},{href:"./shortcuts"}),"Shortcuts")," package which includes\nvarious length presets aliased in terms of pixels, but this might be an\ninteresting option if you're not using Shortcuts for whatever reason."),Object(r.b)("h2",null,Object(r.b)("a",l({parentName:"h2"},{href:"https://github.com/peterramsing/lost"}),"lost")),Object(r.b)("p",null,"Grid system APIs usually exist as a large system of CSS classes or preprocessor\nmixins that lock you into a specific preprocessor such as Sass or Less.\nLostGrid's API is somewhat unique in that it is based on special CSS properties\nthat work with any preprocessor or, in our case, the style sheet output of\nHacss. You can use a style rule like ",Object(r.b)("inlineCode",{parentName:"p"},"lost-column:1/3;")," and the LostGrid plugin\nwill transform the resulting CSS automatically.")))}p.isMDXComponent=!0}},[["bkjR",0,2,1,3,4]]]);